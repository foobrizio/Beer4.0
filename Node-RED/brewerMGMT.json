[{"id":"1963aa58.852a6e","type":"tab","label":"Brewer MGMT","disabled":false,"info":""},{"id":"cc3836fe.795fd8","type":"mqtt in","z":"1963aa58.852a6e","name":"Data from Brewer","topic":"data/br/+/+/+/5700","qos":"0","datatype":"json","broker":"b750acbb.e73dc8","nl":false,"rap":false,"rh":"0","x":120,"y":360,"wires":[["7249a26a.9f0b64"]]},{"id":"7249a26a.9f0b64","type":"function","z":"1963aa58.852a6e","name":"","func":"const topic = msg.topic;\nlet array = topic.split('/');\n\nlet device = array[2];\nlet sensor = array[3];\nlet object = array[4];\n\nif(msg.payload.v == -127 ) return;\n\nlet formattedValue = Math.round(msg.payload.v*100)/100;\n/* Valutare se togliere il sensorType dall'insieme di\n * valori che vengono inoltrati nei nodi successivi\n */\nlet value1 = {\n            payload: {\n                value: formattedValue,\n                devInstance : device,\n                sensorType  : sensor\n            }\n}\nlet value2 = {\n            payload: {\n                time: msg.payload.tstamp,\n                value: formattedValue,\n                devInstance: device,\n                sensorType:  sensor,\n                objInstance: object\n            }\n};\n\nreturn [value1, value2];\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":255,"y":360,"wires":[["9c05eca6.48661","fd7af7d7.fb55"],["6863f0c2.a0cdf8"]],"outputLabels":["temperature","payload"],"icon":"node-red/switch.svg","l":false},{"id":"26b6b482.d5d554","type":"comment","z":"1963aa58.852a6e","name":"DownFlow","info":"Il flow sottostante serve a caricare i file dentro il DB InfluxDB","x":240,"y":400,"wires":[]},{"id":"537c787.f0a8e08","type":"comment","z":"1963aa58.852a6e","name":"UpFlow","info":"Il flow in alto serve a gestire le soglie della sensore e, inoltre, ad inviare il valore su OpenHab","x":250,"y":320,"wires":[]},{"id":"9c05eca6.48661","type":"function","z":"1963aa58.852a6e","name":"Temperature Thresholds check","func":"// Qui riprendiamo i valori dal nodo precedente.\nlet device = msg.payload.devInstance;\nlet sensor = msg.payload.sensorType;\nlet value = msg.payload.value;\n\n\n/* Qui andiamo a recuperare le soglie stabilite per il\n * nostro sensore\n */\nlet minValue = global.get(\"brewer_\"+device+\"_minTemp\");\nlet maxValue = global.get(\"brewer_\"+device+\"_maxTemp\");\n\nif(minValue === undefined){\n    minValue = 16;\n}\nif(maxValue === undefined){\n    maxValue = 26;\n}\nlet avg = (minValue + maxValue)/2;\n\n\n/* Recuperiamo i valori della cintura riscaldante e creiamo\n * il msg per il controllo della stessa. L'ID del WiFi relay\n * correlato alla scheda ESP è uguale all'ID della scheda \n * ESP + 1.\n */\nlet beltDevice = parseInt(device)+1;\nlet beltVariable = \"brewer_\"+beltDevice+\"_belt\";\nlet beltStatus = flow.get(beltVariable);\nif(beltStatus === undefined){\n    beltStatus = false;\n    flow.set(beltVariable, beltStatus);\n}\nlet beltControl={\n    topic: \"br/\"+beltDevice+\"/3306/0/5850/cmnd/POWER\",\n    payload: \"\"\n};\n\n\n/* Qui invece gestiamo i valori del led d'allarme */\nlet ledVariable = \"brewer_\"+device+\"_tempAlarm\";\nlet ledStatus = flow.get(ledVariable);\nif(ledStatus === undefined){\n    ledStatus = false;\n    flow.set(ledVariable, ledStatus);\n}\nlet ledControl={\n    topic: \"cmd/br/\"+device+\"/3311/0/5850\",\n    payload: \"\"\n};\n\nif(value<minValue){\n    /* Abbiamo rilevato una temperatura che è minore di\n     * quella minima accettabile, quindi dobbiamo far partire\n     * la cintura riscaldante (a meno che non sia già partita)\n     */\n    if(!beltStatus){\n        beltControl.payload = \"ON\";\n    }\n    else{\n        // La cintura è già attiva.\n        beltControl = null;\n    }\n    if(!ledStatus){\n        ledControl.payload = {\n            v: \"ON\"\n        };\n        flow.set(ledVariable,true);\n    }\n    else ledControl = null;\n    \n}\nelse if(value>maxValue){\n    /* La cisterna è troppo calda. Dobbiamo far \n     * partire l'allarme\n     */\n    beltControl = null;\n    if(!ledStatus){\n        // L'allarme non è attivo\n        ledControl.payload = {\n            v: \"ON\"\n        };\n        flow.set(ledVariable,true);\n    }\n    else ledControl = null;\n}\nelse if(value>=minValue && value < maxValue){\n    /* Se siamo qui, la temperatura é a posto. */\n    if(value>=avg){\n        /* La temperatura ha superato la media di valori \n         * ammessi. Se c'era una cintura accesa in precedenza\n         * ora è il momento di spegnerla\n         */\n        if(beltStatus){\n            beltControl.payload = \"OFF\";\n        }\n        else beltControl = null;\n    }\n    else beltControl=null;\n    if(ledStatus){\n        /* Se c'era un allarme attivo, ora è il momento di\n           spegnerlo */\n        ledControl.payload = {\n            v: \"OFF\",\n        };\n        flow.set(ledVariable,false)\n    }\n    else ledControl = null;\n}\n\nreturn [beltControl,ledControl];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":530,"y":180,"wires":[["768c888a.0f0a6"],["81abdccc.ec9048"]],"outputLabels":["BELT_CONTROL","LED_CONTROL"]},{"id":"768c888a.0f0a6","type":"mqtt out","z":"1963aa58.852a6e","name":"Send to belt","topic":"","qos":"1","retain":"false","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"b750acbb.e73dc8","x":850,"y":160,"wires":[]},{"id":"7df6d183.a15e3","type":"mqtt in","z":"1963aa58.852a6e","name":"Response from Sonoff","topic":"br/+/3306/+/5850/RESULT","qos":"1","datatype":"json","broker":"b750acbb.e73dc8","nl":false,"rap":false,"rh":"0","x":140,"y":580,"wires":[["d060c561.9d294","d6f7d227.ff3d5"]]},{"id":"d060c561.9d294","type":"function","z":"1963aa58.852a6e","name":"Update belt status","func":"const topic = msg.topic;\nlet array = topic.split('/');\n\nlet device = array[1];\n\nlet beltVariable = \"brewer_\"+device+\"_belt\";\nlet result = false;\nif(msg.payload.POWER == \"ON\")\n    result = true;\n/*\n * Salviamo lo stato della cintura riscaldante in una\n * variabile con visibilità \"flow\", in modo da essere poi\n * leggibile da altri nodi nello stesso flow.\n */\nflow.set(beltVariable, result);","outputs":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":370,"y":580,"wires":[]},{"id":"81abdccc.ec9048","type":"mqtt out","z":"1963aa58.852a6e","name":"Send to led","topic":"","qos":"1","retain":"true","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"b750acbb.e73dc8","x":850,"y":220,"wires":[]},{"id":"fd7af7d7.fb55","type":"switch","z":"1963aa58.852a6e","name":"Switch Brewer","property":"payload.devInstance","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"},{"t":"eq","v":"10","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":480,"y":320,"wires":[["d44074b4.983c7"],["ea686a64.1963c8"]]},{"id":"219e031a.1ca1a4","type":"openhab2-out2","z":"1963aa58.852a6e","name":"Temperature Brewer 2","controller":"dfa31b.5159ece8","itemname":"temperatureBewer1","topic":"ItemCommand","payload":"","onlywhenchanged":false,"x":780,"y":360,"wires":[]},{"id":"f80b0c00.8d1ea","type":"mqtt in","z":"1963aa58.852a6e","name":"Response from Brewers","topic":"resp/br/#","qos":"1","datatype":"json","broker":"b750acbb.e73dc8","nl":false,"rap":false,"rh":"1","x":140,"y":640,"wires":[["ca8db3cc.56fae"]]},{"id":"ca8db3cc.56fae","type":"function","z":"1963aa58.852a6e","name":"Alarm status Check","func":"let topic = msg.topic;\nlet array = topic.split('/');\nlet device = array[2];\nlet object = array[3];\nlet objInstance = array[4];\nlet resource = array[5];\nlet result = null;\n\nif(object==\"3\") {\n    /* Stiamo ricevendo un responso di reboot da una delle due\n    schede */\n    if(resource==\"4\"){\n        let value = msg.payload.v;\n        if(value == \"rebooted\" ) {\n            let ledVariable = \"brewer_\"+device+\"_tempAlarm\";\n            flow.set(ledVariable, false);\n            result = {\n                payload : {\n                    devInstance: device,\n                    value: \"ON\"\n                }\n            };\n        }   \n    }\n    else if(resource==\"11\") {\n        let value = msg.payload.error;\n        if(value==2) {\n            result = {\n                payload : {\n                    devInstance: device,\n                    value: \"OFF\"\n                }\n            }\n        }\n    }\n} \nreturn result;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":370,"y":640,"wires":[["7fdd714d.3f1b58","6359c448.5f3204"]]},{"id":"d44074b4.983c7","type":"change","z":"1963aa58.852a6e","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.value","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":635,"y":300,"wires":[["6931b894.6f63"]],"l":false},{"id":"6931b894.6f63","type":"openhab2-out2","z":"1963aa58.852a6e","name":"Temperature Brewer 1","controller":"dfa31b.5159ece8","itemname":"temperatureBewer0","topic":"ItemCommand","payload":"","onlywhenchanged":false,"x":780,"y":300,"wires":[]},{"id":"ea686a64.1963c8","type":"change","z":"1963aa58.852a6e","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.value","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":635,"y":340,"wires":[["219e031a.1ca1a4"]],"l":false},{"id":"5ce9c5e5.678afc","type":"openhab2-out2","z":"1963aa58.852a6e","name":"Temp Observe 1","controller":"dfa31b.5159ece8","itemname":"TemperatureObserverBrewer0","topic":"ItemCommand","payload":"","onlywhenchanged":false,"x":920,"y":580,"wires":[]},{"id":"7fdd714d.3f1b58","type":"switch","z":"1963aa58.852a6e","name":"","property":"payload.devInstance","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"eq","v":"10","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":570,"y":640,"wires":[["71655fc7.b68498"],["7c96a9e4.2e5eb"]]},{"id":"31361c85.4d7724","type":"openhab2-out2","z":"1963aa58.852a6e","name":"Temp Observe 2","controller":"dfa31b.5159ece8","itemname":"TemperatureObserverBrewer1","topic":"ItemCommand","payload":"","onlywhenchanged":false,"x":920,"y":700,"wires":[]},{"id":"71655fc7.b68498","type":"change","z":"1963aa58.852a6e","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.value","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":715,"y":580,"wires":[["5ce9c5e5.678afc"]],"l":false},{"id":"7c96a9e4.2e5eb","type":"change","z":"1963aa58.852a6e","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.value","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":715,"y":700,"wires":[["31361c85.4d7724"]],"l":false},{"id":"d6f7d227.ff3d5","type":"debug","z":"1963aa58.852a6e","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":350,"y":500,"wires":[]},{"id":"6863f0c2.a0cdf8","type":"influxdb out","z":"1963aa58.852a6e","influxdb":"f3cd2a9e.2c85e","name":"BrewIoTDB","measurement":"temperatureBrewer","precision":"s","retentionPolicy":"","database":"database","precisionV18FluxV20":"ms","retentionPolicyV18Flux":"","org":"organisation","bucket":"bucket","x":770,"y":460,"wires":[]},{"id":"2f8d9298.7b5856","type":"function","z":"1963aa58.852a6e","name":"Handle Leds Br 1","func":"let green = \"\";\nlet red = \"\";\nlet value = msg.payload.value;\n\nswitch(value) {\n    case \"ON\" : \n        green.payload = true;\n        red.payload = false;\n        break;\n    case \"OFF\" : \n        green.payload = false;\n        red.payload = true;\n        break;\n    default:\n        green.payload = false;\n        red.payload = false;\n        break;\n}\n\nreturn [green, red];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":530,"y":820,"wires":[["747c90da.8bfe8"],["17ec7ec8.c197c9"]]},{"id":"747c90da.8bfe8","type":"rpi-gpio out","z":"1963aa58.852a6e","name":"Green Led Brewer 1","pin":"11","set":true,"level":"0","freq":"","out":"out","x":820,"y":780,"wires":[]},{"id":"17ec7ec8.c197c9","type":"rpi-gpio out","z":"1963aa58.852a6e","name":"Red Led Brewer 1","pin":"12","set":true,"level":"0","freq":"","out":"out","x":810,"y":840,"wires":[]},{"id":"f365cf54.9e6e9","type":"rpi-gpio out","z":"1963aa58.852a6e","name":"Green Led Brewer 2","pin":"15","set":true,"level":"0","freq":"","out":"out","x":820,"y":920,"wires":[]},{"id":"246ef210.6dacfe","type":"rpi-gpio out","z":"1963aa58.852a6e","name":"Red Led Brewer 2","pin":"16","set":true,"level":"0","freq":"","out":"out","x":810,"y":980,"wires":[]},{"id":"6359c448.5f3204","type":"switch","z":"1963aa58.852a6e","name":"","property":"payload.devInstance","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"eq","v":"10","vt":"num"}],"checkall":"true","repair":false,"outputs":2,"x":315,"y":880,"wires":[["2f8d9298.7b5856"],["bfaabb67.079608"]],"outputLabels":["Brewer 1","Brewer 2"],"l":false},{"id":"bfaabb67.079608","type":"function","z":"1963aa58.852a6e","name":"Handle Leds Br 2","func":"let green = \"\";\nlet red = \"\";\nlet value = msg.payload.value;\n\nswitch(value) {\n    case \"ON\" : \n        green.payload = true;\n        red.payload = false;\n        break;\n    case \"OFF\" : \n        green.payload = false;\n        red.payload = true;\n        break;\n    default:\n        green.payload = false;\n        red.payload = false;\n        break;\n}\n\nreturn [green, red];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":530,"y":940,"wires":[["f365cf54.9e6e9"],["246ef210.6dacfe"]]},{"id":"b750acbb.e73dc8","type":"mqtt-broker","name":"Broker","broker":"broker.hivemq.com","port":"1883","tls":"c656faed.f9e1","clientid":"","usetls":false,"protocolVersion":"5","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"dfa31b.5159ece8","type":"openhab2-controller2","name":"Openhab","protocol":"http","host":"192.168.1.165","port":"8080","path":"","username":"","password":"","ohversion":"v3","token":""},{"id":"f3cd2a9e.2c85e","type":"influxdb","hostname":"127.0.0.1","port":"8086","protocol":"http","database":"BrewIoT","name":"BrewIoT","usetls":false,"tls":"","influxdbVersion":"1.x","url":"http://localhost:8086","rejectUnauthorized":true},{"id":"c656faed.f9e1","type":"tls-config","name":"","cert":"","key":"","ca":"/etc/mosquitto/ca_certificates/ca.crt","certname":"","keyname":"","caname":"","servername":"","verifyservercert":false}]
