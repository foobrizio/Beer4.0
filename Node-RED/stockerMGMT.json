[{"id":"1775ac36.40b604","type":"tab","label":"Stocker MGMT","disabled":false,"info":""},{"id":"1940a1e5.917e9e","type":"mqtt in","z":"1775ac36.40b604","name":"Data from Stocker","topic":"data/st/+/+/+/5700","qos":"0","datatype":"json","broker":"b750acbb.e73dc8","nl":false,"rap":false,"rh":"2","x":130,"y":360,"wires":[["afd20d09.d4a568"]]},{"id":"afd20d09.d4a568","type":"function","z":"1775ac36.40b604","name":"MUX","func":"const topic = msg.topic;\nlet array = topic.split('/');\n\nlet device = array[2];\nlet sensor = array[3];\nlet object = array[4];\n\nlet formattedValue = Math.round(msg.payload.v*100)/100;\nlet tempVal=null, humVal=null, lightVal=null, fireVal= null;\n\nswitch(sensor){\n    case \"503\": \n        fireVal = {\n            payload: {\n                time: msg.payload.tstamp,\n                value: formattedValue,\n                dev: device,\n                objInstance: object\n            }\n        }; break;\n    case \"3301\": \n        lightVal = {\n            payload: {\n                time: msg.payload.tstamp,\n                value: formattedValue,\n                dev: device,\n                objInstance: object\n            }\n        };break;\n    case \"3303\":\n        tempVal = {\n            payload: {\n                time: msg.payload.tstamp,\n                value: formattedValue,\n                dev: device,\n                objInstance: object\n            }\n        };break;\n    case \"3304\": \n        humVal = {\n            payload: {\n                time: msg.payload.tstamp,\n                value: formattedValue,\n                dev: device,\n                objInstance: object\n            }\n        };break;\n    default: break;\n}\n\nreturn [tempVal, humVal, lightVal, fireVal];\n","outputs":4,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":360,"wires":[["a79e6d5f.27e0f8"],["37e6d11.9ddf62e"],["bb2e63fd.8fc1a8"],["713ba244.fec6f4"]],"outputLabels":["Temperature","Humidity","Light","Fire"],"icon":"node-red/switch.svg"},{"id":"a79e6d5f.27e0f8","type":"function","z":"1775ac36.40b604","name":"Handle Temperature","func":"let value=msg.payload.value;\nlet dev = msg.payload.dev;\nlet obj = msg.payload.objInstance;\nlet timestamp = msg.payload.timestamp;\n\nif(value==-127) return;\n\n\n//Qui recuperiamo il precedente valore d'allarme\nconst tempAlarm=\"stocker_\"+dev+\"_temp_\"+obj;\nlet alarm = flow.get(tempAlarm);\n\n//Questa è la soglia definita nel Recipy MGMT\nlet maxTemp=global.get(\"stocker_max_temp\");\nlet minTemp=global.get(\"stocker_min_temp\");\n/* se non c'è alcuna customizzazione sulla soglia di\n     * umidità, allora impostiamo il valore di default.\n     */\nif(maxTemp === undefined){\n    maxTemp = 26;\n}\nif(minTemp === undefined){\n    minTemp = 4;\n}\n/* Questo if viene eseguito solo la prima volta, per\n * inizializzare la variable */\nif(alarm === undefined){\n    alarm = false;\n    flow.set(tempAlarm, false);\n}\n\nlet mqttMessage = {\n    topic: \"cmd/st/\"+dev+\"/3311/0/5850\",\n    payload: \"\"\n};\n\nif(((value < maxTemp) && (value > minTemp)) && alarm){\n    // temperatura a posto, ma c'è un allarme attivo\n    mqttMessage.payload = {\"v\":\"OFF\"};\n    flow.set(tempAlarm, false);\n}\nelse if((value >= maxTemp) && !alarm){\n    // alta temperatura rilevata, ma nessun allarme attivo\n    mqttMessage.payload = {\"v\":\"ON\"};\n    flow.set(tempAlarm, true);\n}\nelse if((value <= minTemp) && !alarm){\n    // bassa temperatura rilevata, ma nessun allarme attivo\n    mqttMessage.payload = {\"v\":\"ON\"};\n    flow.set(tempAlarm, true);\n}\nelse{\n    // In questo caso non dobbiamo fare nula\n    mqttMessage = null;\n}\n\nreturn [msg, mqttMessage];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":580,"y":100,"wires":[["f725e6b1.5f9c38"],["e802b4e6.19bc08"]]},{"id":"37e6d11.9ddf62e","type":"function","z":"1775ac36.40b604","name":"Handle Humidity","func":"let value=msg.payload.value;\nlet dev = msg.payload.dev;\nlet obj = msg.payload.objInstance;\nlet timestamp = new Date().getTime();\n\nif(value==-127) return;\n\n//Qui recuperiamo il precedente valore d'allarme\nconst humidityAlarm=\"stocker_\"+dev+\"_humidity_\"+obj;\nlet alarm = flow.get(humidityAlarm);\n\n//Questa è la soglia definita nel Recipy MGMT\nlet maxHumidity=global.get(\"stocker_max_humidity\");\nif(maxHumidity === undefined){\n    /* se non c'è alcuna customizzazione sulla soglia di\n     * umidità, allora impostiamo il valore di default.\n     */\n    maxHumidity = 50;\n}\n/* Questo if viene eseguito solo la prima volta, per\n * inizializzare la variable */\nif(alarm === undefined){\n    alarm = false;\n    flow.set(humidityAlarm, false);\n}\nlet mqttMessage = {\n    topic: \"cmd/st/\"+dev+\"/3311/1/5850\",\n    payload: \"\"\n};\n\nif((value < maxHumidity) && alarm){\n    // umidità posto, ma c'è un allarme attivo\n    mqttMessage.payload = {\"v\":\"OFF\"};\n    flow.set(humidityAlarm, false);\n}\nelse if((value >= maxHumidity) && !alarm){\n    // alta umidità rilevata, ma nessun allarme attivo\n    mqttMessage.payload = {\"v\":\"ON\"};\n    flow.set(humidityAlarm, true);\n}\nelse{\n    // In questo caso non dobbiamo fare nula\n    mqttMessage = null;\n}\n\nreturn [msg, mqttMessage];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":260,"wires":[["8d54f65.757e108"],["504f31ba.02cf78"]]},{"id":"bb2e63fd.8fc1a8","type":"function","z":"1775ac36.40b604","name":"Handle Light","func":"let value=msg.payload.value;\nlet dev = msg.payload.dev;\nlet obj = msg.payload.objInstance;\nlet timestamp = msg.payload.timestamp;\n\nif(value==100) return;\n\n//Qui recuperiamo il precedente valore d'allarme\nconst lightAlarm=\"stocker_\"+dev+\"_light_\"+obj;\nlet alarm = flow.get(lightAlarm);\n\n//Questa è la soglia definita nel Recipy MGMT\nlet maxLight=global.get(\"stocker_max_light\");\nif(maxLight === undefined){\n    /* se non c'è alcuna customizzazione sulla soglia di luce\n     * allora impostiamo il valore di default.\n     */\n    maxLight = 50;\n}\n/* Questo if viene eseguito solo la prima volta, per\n * inizializzare la variable */\nif(alarm === undefined){\n    alarm = false;\n    flow.set(lightAlarm, false);\n}\nlet mqttMessage = {\n    topic: \"cmd/st/\"+dev+\"/3311/2/5850\",\n    payload: \"\"\n};\n\nif((value < maxLight) && alarm){\n    // la luce è a posto, ma c'è un allarme attivo\n    mqttMessage.payload = {\"v\":\"OFF\"};\n    flow.set(lightAlarm, false);\n}\nelse if((value >= maxLight)&& !alarm){\n    // luce intensa rilevata, ma nessun allarme attivo\n    mqttMessage.payload = {\"v\":\"ON\"};\n    flow.set(lightAlarm, true);\n}\nelse{\n    // In questo caso non dobbiamo fare nula\n    mqttMessage = null;\n}\n\nreturn [msg, mqttMessage];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":460,"wires":[["4d0a3fa6.f21b4"],["b46d8d59.e73e9"]]},{"id":"713ba244.fec6f4","type":"function","z":"1775ac36.40b604","name":"Handle Fire","func":"let result=true;\nlet dev = msg.payload.dev;\nlet obj = msg.payload.objInstance;\nlet fireAlarm=\"stocker_\"+dev+\"_fire_\"+obj;\nlet alarm = flow.get(fireAlarm);\n\n\n/* Questo if viene eseguito solo la prima volta, per\n * inizializzare la variable */\nif(alarm === undefined){\n    alarm = false;\n    flow.set(fireAlarm, false);\n}\n\nif(msg.payload.value == 1){\n    // non è stata rilevata alcuna fiamma.\n    result= false;\n    //flow.set(fireVariable, false);\n}\n\nmsg.payload = {\n    result: result,\n    dev: dev,\n    obj: obj,\n    timestamp : msg.payload.timestamp\n};\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":550,"y":640,"wires":[["9dc94bd3.e6346","72731a5a.fef81c"]]},{"id":"9dc94bd3.e6346","type":"function","z":"1775ac36.40b604","name":"Fire Alarm Control","func":"let dev=msg.payload.dev;\nlet obj=msg.payload.obj;\n\nconst fireVariable= \"stocker_\"+dev+\"_fire_\"+obj;\nlet alarm = flow.get(fireVariable);\n\n// Qui creiamo il topic\nmsg.topic=\"cmd/st/\"+dev+\"/3311/3/5850\";\n\n\n/* Ora andiamo a verificare se l'allarme va acceso o spento,\n * in base al risultato del sensore e alla variable flow salvata\n * in precedenza. Se entrambi i valori sono negativi, allora l'\n * allarme è spento e rimane spento, quindi non facciamo nulla.\n * Se entrambi i valori sono positivi, allora l'allarme è attivo\n * e rimane attivo, quindi non facciamo nulla. Se i due valori\n * sono contrastanti, allora l'allarme va acceso oppure spento\n */\nlet result=msg.payload.result;\n\nif(result && !alarm){\n    // Fuoco rilevato, ma allarme spento\n    flow.set(fireVariable, true);\n    msg.payload={\"v\":\"ON\"};\n}\nelse if(!result && alarm){\n    // Fuoco non rilevato, ma allarme attivo\n    flow.set(fireVariable, false);\n    msg.payload={\"v\":\"OFF\"};\n}\nelse{\n    //Altrimenti non mandiamo nulla.\n    msg = null;\n}\n\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":810,"y":660,"wires":[["1988b2a8.be70ad"]]},{"id":"1988b2a8.be70ad","type":"mqtt out","z":"1775ac36.40b604","name":"Send Fire Alarm","topic":"","qos":"1","retain":"true","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"b750acbb.e73dc8","x":1020,"y":680,"wires":[]},{"id":"72731a5a.fef81c","type":"change","z":"1775ac36.40b604","name":"OpenHab format","rules":[{"t":"change","p":"payload.result","pt":"msg","from":"true","fromt":"bool","to":"true","tot":"str"},{"t":"change","p":"payload.result","pt":"msg","from":"false","fromt":"bool","to":"false","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":750,"y":620,"wires":[["59cf2e2a.19d5d"]]},{"id":"b46d8d59.e73e9","type":"mqtt out","z":"1775ac36.40b604","name":"Send Light Alarm","topic":"","qos":"1","retain":"true","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"b750acbb.e73dc8","x":950,"y":500,"wires":[]},{"id":"504f31ba.02cf78","type":"mqtt out","z":"1775ac36.40b604","name":"Send Humidity Alarm","topic":"","qos":"1","retain":"true","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"b750acbb.e73dc8","x":940,"y":320,"wires":[]},{"id":"e802b4e6.19bc08","type":"mqtt out","z":"1775ac36.40b604","name":"Send Temperature Alarm","topic":"","qos":"1","retain":"true","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"b750acbb.e73dc8","x":1010,"y":140,"wires":[]},{"id":"f725e6b1.5f9c38","type":"change","z":"1775ac36.40b604","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.value","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":835,"y":80,"wires":[["926d4e80.1a4cf8"]],"l":false},{"id":"59cf2e2a.19d5d","type":"change","z":"1775ac36.40b604","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.result","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":875,"y":620,"wires":[["2e1f763a.a56d0a"]],"l":false},{"id":"8d54f65.757e108","type":"change","z":"1775ac36.40b604","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.value","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":815,"y":260,"wires":[["19ce6b00.1cdc8d"]],"l":false},{"id":"4d0a3fa6.f21b4","type":"change","z":"1775ac36.40b604","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"payload.value","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":795,"y":440,"wires":[["c7d4ce19.c74dc8"]],"l":false},{"id":"926d4e80.1a4cf8","type":"openhab2-out2","z":"1775ac36.40b604","name":"Temperature Stocker","controller":"dfa31b.5159ece8","itemname":"temperaturestocker","topic":"ItemCommand","payload":"","onlywhenchanged":false,"x":1000,"y":80,"wires":[]},{"id":"19ce6b00.1cdc8d","type":"openhab2-out2","z":"1775ac36.40b604","name":"Humidity Stocker","controller":"dfa31b.5159ece8","itemname":"humidityStocker","topic":"","payload":"","onlywhenchanged":false,"x":950,"y":260,"wires":[]},{"id":"c7d4ce19.c74dc8","type":"openhab2-out2","z":"1775ac36.40b604","name":"Light Stocker","controller":"dfa31b.5159ece8","itemname":"lightSensor","topic":"","payload":"","onlywhenchanged":false,"x":940,"y":440,"wires":[]},{"id":"2e1f763a.a56d0a","type":"openhab2-out2","z":"1775ac36.40b604","name":"Fire Alarm Stocker","controller":"dfa31b.5159ece8","itemname":"fireSensor","topic":"ItemCommand","payload":"","onlywhenchanged":false,"x":1030,"y":620,"wires":[]},{"id":"b750acbb.e73dc8","type":"mqtt-broker","name":"Broker","broker":"broker.hivemq.com","port":"1883","tls":"c656faed.f9e1","clientid":"","usetls":false,"protocolVersion":"5","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"dfa31b.5159ece8","type":"openhab2-controller2","name":"Openhab","protocol":"http","host":"192.168.1.165","port":"8080","path":"","username":"","password":"","ohversion":"v3","token":""},{"id":"c656faed.f9e1","type":"tls-config","name":"","cert":"","key":"","ca":"/etc/mosquitto/ca_certificates/ca.crt","certname":"","keyname":"","caname":"","servername":"","verifyservercert":false}]
